ARCH_LOC := $(wildcard $(shell root-config --prefix)/etc/Makefile.arch)
include $(ARCH_LOC)

MAKEFLAGS = --no-print-directory -r -s

VPATH    += $(OBJDIR) $(SRCDIR)
INCLUDES += -Iinclude -I./

CXXFLAGS += -Wall -Wextra -Wno-overloaded-virtual -Wno-ignored-qualifiers -Wno-unused-parameter
#-Wno-ignored-qualifiers -Wno-unused-parameter
# -Wparentheses-equality #-Wno-unused

# Set the locations of some files
DICTHEAD = $(SRCDIR)/$(LIBRARY)_Dict.h
DICTOBJ = $(OBJDIR)/$(LIBRARY)_Dict.o
DICTFILE = $(SRCDIR)/$(LIBRARY)_Dict.cxx
DICTLDEF = $(INCDIR)/$(LIBRARY)_LinkDef.h
SKIPCPPLIST = $(DICTFILE)
SKIPHLIST = $(DICTHEAD) $(DICTLDEF)
LIBDIR = $(LArProf_LIB_PATH)
LIBFILE   = $(LIBDIR)/lib$(LIBRARY).a
SHLIBFILE = $(LIBDIR)/lib$(LIBRARY).$(DllSuf)

# Set up the default targets
default: shlib 


# List of all header and source files to build
HLIST   = $(filter-out $(SKIPHLIST),$(wildcard $(INCDIR)/*.h))
CPPLIST = $(filter-out $(SKIPCPPLIST),$(wildcard $(SRCDIR)/*.C))
# List of all object files to build
OLIST = $(patsubst %.C,%.o,$(notdir $(CPPLIST)))

# Implicit rule to compile all sources
%.o : %.C
	@echo "Compiling $<" 
	@mkdir -p $(OBJDIR) 
	@$(CXX) $(CXXFLAGS) -c $< -o $(OBJDIR)/$(notdir $@) $(INCLUDES)

# Rule to create the dictionary
$(DICTFILE): $(HLIST) $(DICTLDEF)
	@echo "Generating dictionary $@"
	@$(shell root-config --exec-prefix)/bin/rootcint -f $(DICTFILE) -rmf lib$(LIBRARY).rootmap -rml lib$(LIBRARY).so $(ADDITIONAL_ROOTMAPLIBRARY) $(INCLUDES) $^

# Rule to comile the dictionary
$(DICTOBJ): $(DICTFILE)
	@echo "Compiling $<"
	@mkdir -p $(OBJDIR)
	@$(CXX) $(CXXFLAGS) -c $(INCLUDES) -o $@ $<

##############################
# The dependencies section
# - the purpose of the .d files is to keep track of the
#   header file dependence
# - this can be achieved using the makedepend command
############################## 
# Useful build targets
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
-include $(foreach var,$(notdir $(CPPLIST:.C=.d)),$(DEPDIR)/$(var))
endif
endif

$(DEPDIR)/%.d: %.C
	@mkdir -p $(DEPDIR)
	if test -f $< ; then \
		echo "Making $(@F)"; \
		$(SHELL) -ec '$(CPP) -MM $(CXXFLAGS) $(INCLUDES) $< | sed '\''/Cstd\/rw/d'\'' > $@'; \
	fi

# Rule to combine objects into a unix shared library

$(SHLIBFILE): $(OLIST) $(DICTOBJ)
	@echo "Making shared library: $(SHLIBFILE)"
	@rm -f $(SHLIBFILE)
	@$(LD) $(LDFLAGS) $(SOFLAGS) $(addprefix $(OBJDIR)/,$(OLIST)) $(DICTOBJ) -o $(SHLIBFILE)

shlib: $(SHLIBFILE)


clean:
	@rm -f $(DICTFILE) $(DICTHEAD)
	@rm -f $(OBJDIR)/*.o
	@rm -f $(SHLIBFILE)
	@rm -f $(SFRAME_LIB_PATH)/lib$(LIBRARY).so

distclean:
	@rm -rf $(OBJDIR)
	@rm -rf $(DEPDIR)
	@rm -f $(DICTFILE) $(DICTHEAD)
	@rm -f $(SHLIBFILE)
	@rm -f lib/lib$(LIBRARY).so

.PHONY : shlib default clean
